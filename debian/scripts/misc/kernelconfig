#!/bin/bash

. debian/debian.env

# We have to be in the top level kernel source directory
if [ ! -f MAINTAINERS ] || [ ! -f Makefile ]; then
	echo "This does not appear to be the kernel source directory." 1>&2
	exit 1
fi

mode=${1:?"Usage: $0 (oldconfig|editconfig) [do_enforce_all]"}
do_enforce_all=${2:-0}
yes=0
case "$mode" in
    update*configs)  mode='syncconfig' ;;
    default*configs) mode='oldconfig'; yes=1 ;;
    edit*configs)    ;; # All is good
    gen*configs)     mode='genconfigs' ;; # All is good
    dump*configs)    mode='config'; yes=1 ;;
    *) echo "$0 called with invalid mode" 1>&2
       exit 1 ;;
esac

if [ -z "$gcc" ]; then
    echo "ERROR: gcc environment variable must be set"
    exit 1
fi

kerneldir="`pwd`"
confdir="$kerneldir/${DEBIAN}/config"
variant="$2"

. $DEBIAN/etc/kernelconfig

bindir="`pwd`/${DROOT}/scripts/misc"
tmpdir=`mktemp -d`
mkdir "$tmpdir/CONFIGS"

if [ "$mode" = "genconfigs" ]; then
	keep=1
	mode="oldconfig"
	test -d CONFIGS || mkdir CONFIGS
fi

warning_partial=

# Use annotations to generate configs
ARCHES=$(sed -ne 's/^# ARCH: \(.*\)/\1/p' < ${confdir}/annotations)
FLAVOURS=$(sed -ne 's/^# FLAVOUR: \(.*\)/\1/p' < ${confdir}/annotations)

for flavour in ${FLAVOURS}; do
	arch=$(echo $flavour    | sed 's/\([^-]*\)-\(.*\)/\1/')
	flavour=$(echo $flavour | sed 's/\([^-]*\)-\(.*\)/\2/')

	# Generate .config from annotations
	fullconf="$tmpdir/$arch-$flavour-full"
	python3 ${bindir}/annotations -f ${confdir}/annotations --arch $arch --flavour $flavour --export > $fullconf

	# Update .config via kconfig
	rm -rf build
	mkdir build

	# Map debian archs to kernel archs
	case "$arch" in
		ppc64|ppc64el)	kernarch="powerpc"	;;
		amd64)		kernarch="x86_64"	;;
		lpia)		kernarch="x86" 		;;
		sparc)		kernarch="sparc64"	;;
		armel|armhf)	kernarch="arm"		;;
		s390x)		kernarch="s390"		;;
		riscv64)	kernarch="riscv"	;;
		*)		kernarch="$arch"	;;
	esac

	# Determine cross toolchain to use for Kconfig compiler tests
	cross_compile="$(dpkg-architecture -qDEB_HOST_GNU_TYPE -a$arch 2>/dev/null)-"

	# Arch-specific compiler, if any
	archgcc=$(echo -e "show-%:\n\t@echo \$(\$*)\ninclude $DEBIAN/rules.d/$arch.mk" | make -s -f - show-gcc)

	# Environment variables for 'make *config'. We omit CROSS_COMPILE
	# for i386 since it is no longer supported after 19.04, however
	# we maintain the configs for hwe.
	modify_config=true
	env="ARCH=$kernarch DEB_ARCH=$arch"
	compiler_path=$(which "${cross_compile}${archgcc:-$gcc}" || true)
	if [ "$compiler_path" != '' ]; then
		env="$env CROSS_COMPILE=$cross_compile CC=$compiler_path"
	else
		echo "WARNING: ${cross_compile}gcc not installed"
		modify_config=
		warning_partial="$warning_partial $arch"
	fi

	cat "$fullconf" > build/.config

	# Call oldconfig or menuconfig
	if [ "$modify_config" ]; then
		case "$mode" in
		    editconfigs)
			# Interactively edit config parameters
			while : ; do
				echo -n "Do you want to edit config: $arch/$flavour? [Y/n] "
				read choice
				case "$choice" in
				y* | Y* | "" )
					make O=`pwd`/build $conc_level $env menuconfig
					break ;;
				n* | N* )
					# 'syncconfig' prevents
					# errors for '-' options set
					# in common config fragments
					make O=`pwd`/build $conc_level $env syncconfig
					break ;;
				*)
					echo "Entry not valid"
				esac
			done
			;;
		    *)
			echo "* Run $mode (yes=$yes) on $arch/$flavour ..."
			if [ "$yes" -eq 1 ]; then
				yes "" | make O=`pwd`/build $conc_level $env "$mode"
			else
				make O=`pwd`/build $conc_level $env "$mode"
			fi ;;
		esac
	fi
	conf_file=${arch}-config.flavour.${flavour}
	if [ "$modify_config" ]; then
		# Import all changes back to annotations
		python3 ${bindir}/annotations -f ${confdir}/annotations --arch ${arch} --flavour ${flavour} --import build/.config

		# Export config for config-check
		cat build/.config >"$tmpdir/CONFIGS/$conf_file"
	fi
	if [ "$keep" = "1" ]; then
		cat build/.config > CONFIGS/$conf_file
	fi
done

echo ""
echo "Running config-check for all configurations ..."
echo ""
fail=0
for flavour in ${FLAVOURS}; do
	arch=$(echo $flavour    | sed 's/\([^-]*\)-\(.*\)/\1/')
	flavour=$(echo $flavour | sed 's/\([^-]*\)-\(.*\)/\2/')

	echo "Running config-check for ${arch}-${flavour}"
	conf_file=${arch}-config.flavour.${flavour}
	python3 ${bindir}/annotations -f ${confdir}/annotations --arch ${arch} --flavour ${flavour} --check ${tmpdir}/CONFIGS/${conf_file} || let "fail=$fail+1"
done

rc=0
if [ "$fail" != 0 ]; then
	rc=1
	echo ""
	echo "*** ERROR: $fail config-check failures detected"
	echo ""
fi

rm -rf build

if [ "$warning_partial" ]; then
	rc=1
	echo ""
	echo "WARNING: configuration operation applied only to a subset of architectures (skipped$warning_partial)" 1>&2
	echo ""
fi

exit "${rc}"
